package nl.wifidroid;

import java.awt.Color;
import java.awt.Rectangle;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayDeque;
import java.util.Date;
import java.util.Iterator;

import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 * 
 * @author Maarten Blokker
 */
@SuppressWarnings("serial")
public class ConsoleView extends javax.swing.JPanel {

	private int historySize = 10;
	private int historyIndex = 0;
	private ArrayDeque<String> historyStack = new ArrayDeque<String>(
			historySize);

	/**
	 * Creates new form NewJPanel
	 */
	public ConsoleView() {
		initComponents();
		messageField.addKeyListener(new KeyHandler());
	}

	@Override
	public void addNotify() {
		super.addNotify();

		// focus the textfield when this view is added to a container
		messageField.requestFocus();
	}

	public void setListener(ActionListener listener) {
		messageButton.addActionListener(listener);
	}

	public String getUserInput() {
		return messageField.getText();
	}

	public void clearUserInput() {
		messageField.setText("");
		messageField.requestFocus();
	}

	public void addMessage(String tag, String message) {
		addMessage(tag, message, Color.BLACK);
	}

	public void addMessage(final String tag, final String message,
			final Color color) {
		SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				String colorName = color.toString();
				StyledDocument doc = messagePanel.getStyledDocument();
				Style style = doc.getStyle(colorName);

				// this color is not in the pane yet, so add it
				if (style == null) {
					style = messagePanel.addStyle(colorName, null);
					StyleConstants.setForeground(style, color);
				}

				int offset = doc.getLength();
				String time = SimpleDateFormat.getTimeInstance().format(
						new Date());

				try {
					String format = "%s [%s]: %s\n";
					String text = String.format(format, time, tag, message);
					doc.insertString(offset, text, null);
					doc.setCharacterAttributes(offset, doc.getLength(), style,
							true);

					if (tag.equals(ConsoleController.TAG)) {
						// if the history stack is full, remove the last element
						if (historyStack.size() >= historySize) {
							historyStack.removeLast();
						}

						// add the command to the stack
						historyStack.push(message);
						historyIndex = -1;
					}
				} catch (BadLocationException ex) {
					ex.printStackTrace();
				}

				// scroll to the bottom of the message panel
				messagePanel.revalidate();
				int height = (int) messagePanel.getPreferredSize().getHeight();
				Rectangle rect = new Rectangle(0, height, 10, 10);
				messagePanel.scrollRectToVisible(rect);
			}
		});

	}

	private class KeyHandler extends KeyAdapter {

		private String getHistory() {
			String history = null;
			Iterator<String> it = historyStack.iterator();

			int i = 0;
			while (it.hasNext() && i++ < historyIndex) {
				history = it.next();
			}

			return history;
		}

		@Override
		public void keyPressed(KeyEvent e) {
			int keycode = e.getKeyCode();
			if (keycode == KeyEvent.VK_ENTER && !getUserInput().isEmpty()) {
				// simulate a click on the messagebutton if we press enter
				messageButton.doClick();
			}

			String history = getHistory();
			if (keycode == KeyEvent.VK_UP) {
				if (historyIndex < historySize) {
					historyIndex++;
				} else {
					historyIndex = 0;
				}
				if (history != null) {
					messageField.setText(history);
				}
			} else if (keycode == KeyEvent.VK_DOWN) {
				if (historyIndex > 0) {
					historyIndex--;
				} else {
					historyIndex = historySize - 1;
				}
				if (history != null) {
					messageField.setText(history);
				}
			} else {
				// reset the history index
				historyIndex = -1;
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		messagePanel = new javax.swing.JTextPane();
		messageField = new javax.swing.JTextField();
		messageButton = new javax.swing.JButton();

		messagePanel.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
		messagePanel.setEditable(false);
		jScrollPane1.setViewportView(messagePanel);

		messageField.setColumns(70);

		messageButton.setText("Execute");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(
																		messageField,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		1,
																		Short.MAX_VALUE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		messageButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		73,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addComponent(jScrollPane1))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										429, Short.MAX_VALUE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(messageField)
												.addComponent(messageButton))
								.addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents
		// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton messageButton;
	private javax.swing.JTextField messageField;
	private javax.swing.JTextPane messagePanel;
	// End of variables declaration//GEN-END:variables
}
